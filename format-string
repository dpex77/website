<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>Format String Vulnerability in Python</title>
<style>
body {
    font-family: Arial, sans-serif;
    background: #f4f4f4 url('cloud.jpg') no-repeat top center;
    background-size: cover;
    padding: 20px;
    color: #111;
}

.card {
    background: white;
    border-radius: 12px;
    box-shadow: 0 8px 30px rgba(11,26,43,0.08);
    padding: 20px;
    margin-bottom: 20px;
    white-space: pre-wrap;
}

h2 {
    margin-top: 0;
}

code {
    background-color: #eee;
    padding: 2px 4px;
    border-radius: 4px;
}
</style>
</head>
<body>

<div class="card">
<h2>1. Overview:</h2>
In Python, strings can be formatted using <code>f-strings</code>, <code>.format()</code>, or <code>%</code> formatting.

F-strings allow inline expression evaluation and string interpolation.

Example:

<pre><code>name = "Dipesh"
print(f"My name is {name}")</code></pre>

Here, the <code>f</code> before the string tells Python to evaluate expressions inside <code>{}</code> before printing.

<b>Not vulnerable in Python:</b>

Python’s <code>print()</code> function does not interpret user input as a format string in an unsafe way.

Even with f-strings, Python evaluates expressions before printing—you cannot inject arbitrary format specifiers into raw print calls like in C.

Format string vulnerabilities happen in lower-level languages like C, where unsanitized user input is passed to formatting functions such as <code>printf()</code>.
</div>

<div class="card">
<h2>2. Vulnerability from an Attacker Perspective:</h2>
2.1 Attempts of an attacker (C example for comparison):

<pre><code>char user_input[100];          // Creates a string buffer
scanf("%s", user_input);       // Reads user input
printf(user_input);            // Prints directly (vulnerable)</code></pre>

If an attacker enters:

<code>%x %x %x %x</code>

They can read memory and potentially execute arbitrary code.

<b>Python is safe</b> because it does not interpret user input as format specifiers in print statements.
</div>

<div class="card">
<h2>3. Vulnerability from a Defender Perspective:</h2>
3.1 Solutions for defenders (best practices in Python):

<ul>
<li>Always treat user input as <b>data</b>, not code.</li>
<li>Use <code>f-strings</code>, <code>.format()</code>, or string concatenation safely:</li>
</ul>

<pre><code>user_input = input("Enter your name: ")
print(f"Hello {user_input}")       # Safe
print("Hello {}".format(user_input))  # Safe</code></pre>

Avoid <code>eval()</code> on untrusted input—this is the only Python operation that can execute user-provided code.
</div>

<div class="card">
<h2>4. Extras:</h2>
<ul>
<li>Python’s string formatting is inherently safe when used properly.</li>
<li>Format string vulnerabilities are mostly a concern in C/C++.</li>
<li>Always validate and sanitize input in web applications or when interacting with lower-level code.</li>
<li>Using logging with user input is also safe in Python, unlike vulnerable <code>printf(user_input)</code> in C:</li>
</ul>

<pre><code>import logging
user_input = input("Enter data: ")
logging.info("User input: %s", user_input)  # Safe</code></pre>
</div>

</body>
</html>
